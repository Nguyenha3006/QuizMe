"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Zap, Target, Trophy, Clock, Crosshair, Bookmark, AlertCircle, Lightbulb, Dice6, ZapIcon } from "lucide-react"

export default function BattleArena() {
  const [savedTips, setSavedTips] = useState<string[]>([])

  const battleModes = [
    {
      id: "sprint",
      title: "Sprint 15 Ph√∫t",
      icon: Zap,
      description:
        "Th·ª≠ th√°ch t·ªëc ƒë·ªô v·ªõi 15 c√¢u nh·∫≠n bi·∫øt - th√¥ng hi·ªÉu. R√®n luy·ªán ph·∫£n x·∫° v√† ch·ªëng sai s√≥t v·∫∑t. Ho√†n h·∫£o ƒë·ªÉ kh·ªüi ƒë·ªông tr∆∞·ªõc m·ªói bu·ªïi h·ªçc.",
      button: "THAM CHI·∫æN NGAY",
      color: "from-yellow-500 to-orange-500",
      borderColor: "border-yellow-500/30",
    },
    {
      id: "marathon",
      title: "Marathon 90 Ph√∫t",
      icon: Target,
      description:
        "M√¥ ph·ªèng 100% k·ª≥ thi THPT Qu·ªëc gia. 50 c√¢u, 90 ph√∫t, √°p l·ª±c th·ª±c s·ª±. Kh√¥ng c√≥ n√∫t t·∫°m d·ª´ng. H√£y chu·∫©n b·ªã t√¢m l√Ω v√† gi·∫•y nh√°p!",
      button: "V√ÄO PH√íNG THI",
      color: "from-red-500 to-pink-500",
      borderColor: "border-red-500/30",
    },
    {
      id: "rank",
      title: "Leo Rank Tu·∫ßn",
      icon: Trophy,
      description:
        "M·ªói tu·∫ßn m·ªôt ƒë·ªÅ thi ƒë·∫∑c bi·ªát do AI l·ª±a ch·ªçn. Ho√†n th√†nh ƒë·ªÉ ƒë∆∞·ª£c x·∫øp h·∫°ng v·ªõi h√†ng ng√†n sƒ© t·ª≠ kh√°c. Vinh danh TOP 100 v√†o m·ªói Ch·ªß Nh·∫≠t.",
      button: "TH·ª¨ S·ª®C B·∫¢NG V√ÄNG",
      color: "from-purple-500 to-indigo-500",
      borderColor: "border-purple-500/30",
    },
  ]

  const tips = [
    {
      id: "strategy-3-rounds",
      title: "Chi·∫øn thu·∫≠t '3 V√≤ng' B·∫•t b·∫°i",
      icon: Crosshair,
      content:
        "V√≤ng 1 (30-40 ph√∫t): Ch·ªâ l√†m 35-40 c√¢u d·ªÖ nh·∫•t, ch·∫Øc ch·∫Øn ƒë√∫ng. V√≤ng 2 (20-30 ph√∫t): Gi·∫£i quy·∫øt c√°c c√¢u v·∫≠n d·ª•ng, ƒë√£ c√≥ √Ω t∆∞·ªüng. V√≤ng 3 (Th·ªùi gian c√≤n l·∫°i): Chinh ph·ª•c c√°c c√¢u v·∫≠n d·ª•ng cao.",
    },
    {
      id: "smart-guessing",
      title: "Ngh·ªá thu·∫≠t 'L·ª•i' C√≥ C∆° s·ªü",
      icon: Dice6,
      content:
        "Khi ph·∫£i ƒëo√°n, h√£y ∆∞u ti√™n c√°c ƒë√°p √°n c√≥ gi√° tr·ªã ƒë·∫∑c bi·ªát (m=0, m=1) ho·∫∑c lo·∫°i tr·ª´ c√°c ph∆∞∆°ng √°n v√¥ l√Ω (v√≠ d·ª•: b√°n k√≠nh R kh√¥ng th·ªÉ √¢m). ƒê·ª´ng bao gi·ªù b·ªè tr·ªëng c√¢u tr·∫£ l·ªùi!",
    },
    {
      id: "calculator-mastery",
      title: "L√†m ch·ªß Casio - B·∫•m m√°y Th·∫ßn s·∫ßu",
      icon: ZapIcon,
      content:
        "S·ª≠ d·ª•ng th√†nh th·∫°o ch·ª©c nƒÉng TABLE (MODE 8) ƒë·ªÉ kh·∫£o s√°t h√†m s·ªë, SOLVE ƒë·ªÉ gi·∫£i ph∆∞∆°ng tr√¨nh v√† CALC ƒë·ªÉ th·ª≠ ƒë√°p √°n. Ti·∫øt ki·ªám h√†ng ph√∫t cho m·ªói c√¢u.",
    },
    {
      id: "avoid-traps",
      title: "'B·∫´y' Sai s√≥t Ng·ªõ ng·∫©n",
      icon: AlertCircle,
      content:
        "Lu√¥n ƒë·ªçc k·ªπ ƒë·ªÅ! Ch√∫ √Ω c√°c t·ª´ kh√≥a 'ƒë·ªìng bi·∫øn', 'ngh·ªãch bi·∫øn', 'kh√°c 0', 'nguy√™n d∆∞∆°ng'. G·∫°ch ch√¢n d∆∞·ªõi c√°c y√™u c·∫ßu quan tr·ªçng ƒë·ªÉ kh√¥ng b·ªã ƒë·ªÅ b√†i ƒë√°nh l·ª´a.",
    },
    {
      id: "mental-strength",
      title: "Gi·ªØ c√°i ƒê·∫ßu L·∫°nh",
      icon: Lightbulb,
      content:
        "G·∫∑p c√¢u qu√° kh√≥? H√≠t th·ªü s√¢u v√† b·ªè qua. ƒê·ª´ng ƒë·ªÉ m·ªôt c√¢u l√†m ·∫£nh h∆∞·ªüng ƒë·∫øn t√¢m l√Ω c·ªßa 49 c√¢u c√≤n l·∫°i. B·∫°n lu√¥n c√≥ th·ªÉ quay l·∫°i sau.",
    },
  ]

  const leaderboard = [
    { rank: 1, name: "Nguy·ªÖn VƒÉn A", score: 4850, avatar: "ü•á" },
    { rank: 2, name: "Tr·∫ßn Th·ªã B", score: 4720, avatar: "ü•à" },
    { rank: 3, name: "L√™ Minh C", score: 4680, avatar: "ü•â" },
    { rank: 4, name: "Ph·∫°m H·ªìng D", score: 4520, avatar: "üë§" },
    { rank: 5, name: "Ho√†ng Anh E", score: 4380, avatar: "üë§" },
  ]

  const toggleSaveTip = (tipId: string) => {
    setSavedTips((prev) => (prev.includes(tipId) ? prev.filter((id) => id !== tipId) : [...prev, tipId]))
  }

  return (
    <div className="max-w-7xl mx-auto px-6 py-8">
      {/* Battle Arena Header */}
      <div className="mb-12 text-center">
        <h2 className="text-5xl font-bold mb-4 bg-gradient-to-r from-orange-400 via-red-500 to-pink-500 bg-clip-text text-transparent">
          ƒê·∫§U TR∆Ø·ªúNG TO√ÅN H·ªåC
        </h2>
        <p className="text-slate-300 text-lg max-w-2xl mx-auto">
          R√®n luy·ªán t·ªëc ƒë·ªô, chi·∫øn thu·∫≠t, v√† t√¢m l√Ω. ƒê√¢y kh√¥ng ph·∫£i n∆°i h·ªçc ki·∫øn th·ª©c m·ªõi, ƒë√¢y l√† n∆°i chinh ph·ª•c k·ª≥ thi
          th·∫≠t.
        </p>
      </div>

      {/* Battle Modes */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
        {battleModes.map((mode) => {
          const Icon = mode.icon
          return (
            <Card
              key={mode.id}
              className={`border-2 ${mode.borderColor} bg-slate-800/50 hover:bg-slate-800 transition-all group overflow-hidden relative`}
            >
              <div className={`absolute inset-0 opacity-5 bg-gradient-to-br ${mode.color}`}></div>
              <CardHeader className="relative z-10">
                <div
                  className={`w-14 h-14 rounded-lg bg-gradient-to-br ${mode.color} flex items-center justify-center mb-4 group-hover:scale-110 transition-transform`}
                >
                  <Icon className="w-7 h-7 text-white" />
                </div>
                <CardTitle className="text-2xl">{mode.title}</CardTitle>
              </CardHeader>
              <CardContent className="relative z-10">
                <p className="text-slate-300 mb-6">{mode.description}</p>
                <Button
                  className={`w-full bg-gradient-to-r ${mode.color} hover:opacity-90 text-white border-0 font-bold`}
                >
                  {mode.button}
                </Button>
              </CardContent>
            </Card>
          )
        })}
      </div>

      {/* Leaderboard */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
        <Card className="lg:col-span-1 border-slate-700 bg-slate-800/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Trophy className="w-5 h-5 text-yellow-400" />
              B·∫£ng X·∫øp H·∫°ng Tu·∫ßn
            </CardTitle>
            <CardDescription>Top 5 sƒ© t·ª≠ xu·∫•t s·∫Øc</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {leaderboard.map((player) => (
                <div
                  key={player.rank}
                  className="flex items-center justify-between p-3 bg-slate-700/30 rounded-lg hover:bg-slate-700/50 transition-colors"
                >
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{player.avatar}</span>
                    <div>
                      <p className="font-semibold text-sm">{player.name}</p>
                      <p className="text-xs text-slate-400">Rank #{player.rank}</p>
                    </div>
                  </div>
                  <span className="font-bold text-cyan-400">{player.score}</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Performance Stats */}
        <Card className="lg:col-span-2 border-slate-700 bg-slate-800/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Clock className="w-5 h-5 text-blue-400" />
              Ph√¢n t√≠ch Hi·ªáu su·∫•t
            </CardTitle>
            <CardDescription>D·ªØ li·ªáu t·ª´ b√†i thi g·∫ßn nh·∫•t</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="p-4 bg-slate-700/30 rounded-lg">
                <p className="text-slate-400 text-sm mb-2">Ph√¢n b·ªï Th·ªùi gian</p>
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>20 c√¢u d·ªÖ</span>
                    <span className="text-green-400 font-semibold">35%</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>20 c√¢u TB</span>
                    <span className="text-blue-400 font-semibold">40%</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>10 c√¢u kh√≥</span>
                    <span className="text-orange-400 font-semibold">25%</span>
                  </div>
                </div>
              </div>

              <div className="p-4 bg-slate-700/30 rounded-lg">
                <p className="text-slate-400 text-sm mb-2">Ch·ªâ s·ªë Quy·∫øt ƒëo√°n</p>
                <p className="text-3xl font-bold text-cyan-400 mb-2">7</p>
                <p className="text-xs text-slate-400">l·∫ßn thay ƒë·ªïi ƒë√°p √°n</p>
                <Badge className="mt-2 bg-yellow-500/20 text-yellow-300 border-yellow-500/30">‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán</Badge>
              </div>

              <div className="p-4 bg-slate-700/30 rounded-lg">
                <p className="text-slate-400 text-sm mb-2">AI Nh·∫≠n x√©t</p>
                <p className="text-sm text-slate-300">
                  B·∫°n d√†nh qu√° nhi·ªÅu th·ªùi gian (40%) cho 10 c√¢u cu·ªëi. Chi·∫øn thu·∫≠t t·ªët h∆°n l√† ho√†n th√†nh 40 c√¢u ƒë·∫ßu nhanh
                  v√† ch√≠nh x√°c.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Battle Tips */}
      <div>
        <h3 className="text-2xl font-bold mb-6">B√≠ K√≠p Th·ª±c Chi·∫øn</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {tips.map((tip) => {
            const Icon = tip.icon
            const isSaved = savedTips.includes(tip.id)
            return (
              <Card key={tip.id} className="border-slate-700 bg-slate-800/50 hover:bg-slate-800 transition-all group">
                <CardHeader>
                  <div className="flex items-start justify-between mb-3">
                    <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-orange-500 to-red-500 flex items-center justify-center group-hover:scale-110 transition-transform">
                      <Icon className="w-5 h-5 text-white" />
                    </div>
                    <button
                      onClick={() => toggleSaveTip(tip.id)}
                      className={`p-2 rounded-lg transition-colors ${
                        isSaved
                          ? "bg-yellow-500/20 text-yellow-400"
                          : "bg-slate-700/50 text-slate-400 hover:text-yellow-400"
                      }`}
                    >
                      <Bookmark className="w-4 h-4" fill={isSaved ? "currentColor" : "none"} />
                    </button>
                  </div>
                  <CardTitle className="text-base">{tip.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-slate-300">{tip.content}</p>
                </CardContent>
              </Card>
            )
          })}
        </div>
      </div>
    </div>
  )
}
